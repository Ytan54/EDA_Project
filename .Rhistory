#Table
prop.table(table(df_clean$HeartAttack, df_clean$BMI_Cat), margin = 2)
ggplot(df_clean, aes(x = BMI_Cat, fill = HeartAttack)) +
geom_bar(position = "fill") +
ylab("Proportion") +
xlab("BMI Level") +
labs(fill = "Heart Attack Status") +
scale_x_discrete(
limits = c("Underweight", "Normal", "Overweight", "Obese"),
labels = c(
"Underweight" = "Underweight (< 18.5)",
"Normal"      = "Normal Weight (18.5–24.9)",
"Overweight"  = "Overweight (25.0–29.9)",
"Obese"       = "Obese (≥ 30.0)"
)
) +
scale_fill_manual(values = custom_colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Table
prop.table(table(df_clean$HeartAttack, df_clean$AGE), margin = 2)
#Bar graph
ggplot(df_clean, aes(x = AGE, fill = HeartAttack)) +
geom_bar(position = "fill") +
ylab("Proportion") +
xlab("Age") +
labs(fill = "Heart Attack Status") +
ggtitle("Proportion of Heart Attack by Age") +
scale_fill_manual(values = custom_colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Table
prop.table(table(df_clean$HeartAttack, df_clean$INCOME), margin = 2)
#Bar graph
ggplot(df_clean, aes(x = INCOME, fill = HeartAttack)) +
geom_bar(position = "fill") +
ylab("Proportion") +
xlab("Income Level") +
labs(fill = "Heart Attack Status") +
ggtitle("Proportion of Heart Attack by Income Level") +
scale_fill_manual(values = custom_colors) +
scale_x_discrete(limits = c("<$10k", "$10-15k", "$15-20k", "$20-25k", "$25-35k", "$35-50k", "$50-75k", ">=75k")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Table
prop.table(table(df_clean$HeartAttack, df_clean$SEX), margin = 2)
#Bar graph
ggplot(df_clean, aes(x = SEX, fill = HeartAttack)) +
geom_bar(position = "fill") +
ylab("Proportion") +
xlab("Sex") +
labs(fill = "Heart Attack Status") +
ggtitle("Proportion of Heart Attack by Sex") +
scale_fill_manual(values = custom_colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Table
prop.table(table(df_clean$HeartAttack, df_clean$RACE), margin = 2)
#Bar graph
ggplot(df_clean, aes(x = RACE, fill = HeartAttack)) +
geom_bar(position = "fill") +
ylab("Proportion") +
xlab("Race") +
labs(fill = "Heart Attack Status") +
ggtitle("Proportion of Heart Attack by Race") +
scale_fill_manual(values = custom_colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Table
prop.table(table(df_clean$HeartAttack, df_clean$BMI_Cat), margin = 2)
ggplot(df_clean, aes(x = BMI_Cat, fill = HeartAttack)) +
geom_bar(position = "fill") +
ylab("Proportion") +
xlab("BMI Level") +
labs(fill = "Heart Attack Status") +
scale_x_discrete(
limits = c("Normal", "Obese", "Overweight"),
labels = c(
"Normal"      = "Normal Weight (18.5–24.9)",
"Obese"       = "Obese (≥ 30.0)",
"Overweight"  = "Overweight (25.0–29.9)"
),
drop = TRUE
) +
scale_fill_manual(values = custom_colors)
#Table
prop.table(table(df_clean$HeartAttack, df_clean$BMI_Cat), margin = 2)
ggplot(df_clean, aes(x = BMI_Cat, fill = HeartAttack)) +
geom_bar(position = "fill") +
ylab("Proportion") +
xlab("BMI Level") +
labs(fill = "Heart Attack Status") +
scale_x_discrete(
limits = c("Normal", "Overweight", "Obese"),
labels = c(
"Normal"      = "Normal Weight (18.5–24.9)",
"Obese"       = "Obese (≥ 30.0)",
"Overweight"  = "Overweight (25.0–29.9)"
),
drop = TRUE
) +
scale_fill_manual(values = custom_colors)
#Table
prop.table(table(df_clean$HeartAttack, df_clean$BMI_Cat), margin = 2)
#Bar graph
ggplot(df_clean, aes(x = BMI_Cat, fill = HeartAttack)) +
geom_bar(position = "fill") +
ylab("Proportion") +
xlab("BMI Level") +
labs(fill = "Heart Attack Status") +
scale_x_discrete(
limits = c("Normal", "Overweight", "Obese"),
labels = c(
"Normal"      = "Normal Weight (18.5–24.9)",
"Obese"       = "Obese (≥ 30.0)",
"Overweight"  = "Overweight (25.0–29.9)"
),
drop = TRUE
) +
scale_fill_manual(values = custom_colors)
#Table
prop.table(table(df_clean$HeartAttack, df_clean$BMI_Cat), margin = 2)
#Bar graph
ggplot(df_clean, aes(x = BMI_Cat, fill = HeartAttack)) +
geom_bar(position = "fill") +
ylab("Proportion") +
xlab("BMI Level") +
labs(fill = "Heart Attack Status") +
scale_x_discrete(
limits = c("Normal", "Overweight", "Obese"),
labels = c(
"Normal"      = "Normal Weight (18.5–24.9)",
"Obese"       = "Obese (≥ 30.0)",
"Overweight"  = "Overweight (25.0–29.9)"
),
drop = TRUE
) +
scale_fill_manual(values = custom_colors)+
theme(axis.text.x = element_text(angle = 45, hjust = 1)
#Table
prop.table(table(df_clean$HeartAttack, df_clean$BMI_Cat), margin = 2)
#Bar graph
ggplot(df_clean, aes(x = BMI_Cat, fill = HeartAttack)) +
geom_bar(position = "fill") +
ylab("Proportion") +
xlab("BMI Level") +
labs(fill = "Heart Attack Status") +
scale_x_discrete(
limits = c("Normal", "Overweight", "Obese"),
labels = c(
"Normal"      = "Normal Weight (18.5–24.9)",
"Obese"       = "Obese (≥ 30.0)",
"Overweight"  = "Overweight (25.0–29.9)"
),
drop = TRUE
) +
scale_fill_manual(values = custom_colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df_clean <- read.csv("~/Documents/GitHub/EDA_Project/data/cleaned_data.csv")
df_clean$BMI_Num <- df_clean$BMI_Num / 100
df_clean$HeartAttack <- as.factor(df_clean$HeartAttack)
df_clean$SEX <- as.factor(df_clean$SEX)
df_clean$RACE <- as.factor(df_clean$RACE)
df_clean$INCOME <- as.factor(df_clean$INCOME)
df_clean$HealthCare <- as.factor(df_clean$HealthCare)
#Full model
df_clean$HeartAttack <- ifelse(df_clean$HeartAttack == "Yes", 1, 0)
glm_main <- glm(HeartAttack ~ BMI_Num, data = df_clean, family = binomial(logit))
summary(glm_main)
glm_extend <- glm(HeartAttack ~ BMI_Num + SEX + AGE_Num + RACE + INCOME + HealthCare, data = df_clean, family = binomial(logit))
glm_null <- glm(HeartAttack ~ 1, data = df_clean, family = binomial(logit))
anova(glm_null, glm_extend, test = "Chisq")
glm_extend <- glm(HeartAttack ~ BMI_Num + SEX + AGE_Num + RACE + INCOME + HealthCare, data = df_clean, family = binomial(logit))
Anova(glm_extend, type="III")
# Load libraries
library(ggplot2)
library(car)
library(carData)
library(ResourceSelection)
library(pROC)
library(dplyr)
library(emmeans)
library(ggeffects)
glm_extend <- glm(HeartAttack ~ BMI_Num + SEX + AGE_Num + RACE + INCOME + HealthCare, data = df_clean, family = binomial(logit))
glm_null <- glm(HeartAttack ~ 1, data = df_clean, family = binomial(logit))
anova(glm_null, glm_extend, test = "Chisq")
glm_extend <- glm(HeartAttack ~ BMI_Num + SEX + AGE_Num + RACE + INCOME + HealthCare, data = df_clean, family = binomial(logit))
Anova(glm_extend, type="III")
glm_extend <- glm(HeartAttack ~ BMI_Num + SEX + AGE_Num + RACE + INCOME, data = df_clean, family = binomial(logit))
glm_null <- glm(HeartAttack ~ 1, data = df_clean, family = binomial(logit))
anova(glm_null, glm_extend, test = "Chisq")
glm_extend <- glm(HeartAttack ~ BMI_Num + SEX + AGE_Num + RACE + INCOME, data = df_clean, family = binomial(logit))
Anova(glm_extend, type="III")
#Baseline Code for Dummy variables
contrasts(df_clean$SEX)
contrasts(df_clean$RACE)
contrasts(df_clean$INCOME)
contrasts(df_clean$HealthCare)
#Individual Z test
summary(glm_extend)
#Baseline Code for Dummy variables
contrasts(df_clean$SEX)
contrasts(df_clean$RACE)
contrasts(df_clean$INCOME)
# --- Bar plot for categorical predictor (INCOME) ---
plot_income_bar <- function(model) {
emm <- emmeans(model, ~ INCOME, type = "response")
emm_df <- as.data.frame(emm)
ggplot(emm_df, aes(x = INCOME, y = prob)) +
geom_col(fill = "#1a80bb") +
geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width = 0.2) +
scale_x_discrete(limits = c("<$10k", "$10-15k", "$15-20k", "$20-25k",
"$25-35k", "$35-50k", "$50-75k", ">=75k")) +
ylab("Predicted Probability of Heart Attack") +
xlab("Income Level") +
ggtitle("Predicted Risk by Income Level") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
# --- Line plot for numeric predictor ---
plot_numeric_line <- function(model, term, x_label) {
pred <- ggpredict(model, terms = term)
ggplot(pred, aes(x = x, y = predicted)) +
geom_line(color = "blue", size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
ylab("Predicted Probability of Heart Attack") +
xlab(x_label) +
ggtitle(paste("Predicted Risk by", x_label)) +
theme_minimal()
}
# --- Generate plots ---
plot_income  <- plot_income_bar(glm_extend)
plot_age     <- plot_numeric_line(glm_extend, "AGE_Num", "Age")
plot_bmi     <- plot_numeric_line(glm_extend, "BMI_Num", "BMI")
# --- View plots ---
print(plot_income)
print(plot_age)
print(plot_bmi)
plot_predicted_probs <- function(varname, model) {
emm <- emmeans(model, as.formula(paste("~", varname)), type = "response")
emm_df <- as.data.frame(emm)
p <- ggplot(emm_df, aes_string(x = varname, y = "prob")) +
geom_col(fill = "#1a80bb") +
geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width = 0.2) +
ylab("Predicted Probability of Heart Attack") +
xlab(varname) +
ggtitle(paste("Predicted Risk by", varname)) +
theme_minimal()
# Follow your example: set axis order via scale_x_discrete (plot-only)
if (varname == "INCOME") {
p <- p +
scale_x_discrete(limits = c("<$10k", "$10-15k", "$15-20k", "$20-25k",
"$25-35k", "$35-50k", "$50-75k", ">=75k")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
p
}
# Use with your fitted model glm_extend
plot_sex        <- plot_predicted_probs("SEX", glm_extend)
plot_race       <- plot_predicted_probs("RACE", glm_extend)
plot_income     <- plot_predicted_probs("INCOME", glm_extend)
plot_healthcare <- plot_predicted_probs("HealthCare", glm_extend)
plot_predicted_probs <- function(varname, model) {
emm <- emmeans(model, as.formula(paste("~", varname)), type = "response")
emm_df <- as.data.frame(emm)
p <- ggplot(emm_df, aes_string(x = varname, y = "prob")) +
geom_col(fill = "#1a80bb") +
geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width = 0.2) +
ylab("Predicted Probability of Heart Attack") +
xlab(varname) +
ggtitle(paste("Predicted Risk by", varname)) +
theme_minimal()
# Follow your example: set axis order via scale_x_discrete (plot-only)
if (varname == "INCOME") {
p <- p +
scale_x_discrete(limits = c("<$10k", "$10-15k", "$15-20k", "$20-25k",
"$25-35k", "$35-50k", "$50-75k", ">=75k")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
p
}
# Use with your fitted model glm_extend
plot_sex        <- plot_predicted_probs("SEX", glm_extend)
plot_race       <- plot_predicted_probs("RACE", glm_extend)
plot_income     <- plot_predicted_probs("INCOME", glm_extend)
print(plot_sex)
print(plot_race)
print(plot_income)
vif(glm_extend)
glm_full <- glm(HeartAttack ~ BMI_Num + SEX + AGE_Num + RACE + INCOME + Exercise + BMI_Num:SEX + BMI_Num:AGE_Num + BMI_Num:RACE + BMI_Num:INCOME, data = df_clean, family = binomial(logit))
Anova(glm_full, type = "III")
glm_full_revised <- glm(HeartAttack ~ BMI_Num + SEX + AGE_Num + RACE + INCOME + BMI_Num:AGE_Num + BMI_Num:RACE, data = df_clean, family = binomial(logit))
glm_full_revised <- glm(HeartAttack ~ BMI_Num + SEX + AGE_Num + RACE + INCOME + BMI_Num:RACE, data = df_clean, family = binomial(logit))
glm.probs <- predict(glm_full_revised, type = "response")
dim(df_clean)
glm.pred<-rep(0, length(glm.probs))    #creating empty vector
glm.pred[glm.probs > 0.5]<-1      #assign >0.5 predicted_Y = 1; if < 0.5 predicted_Y = 0
table(glm.pred, df_clean$HeartAttack)
#error rate
error <- (18412+11)/315938
error
#Table
prop.table(table(df_clean$HeartAttack, df_clean$BMI_Cat), margin = 2)
#Bar graph
ggplot(df_clean, aes(x = BMI_Cat, fill = HeartAttack)) +
geom_bar(position = "fill") +
ylab("Proportion") +
xlab("BMI Level") +
labs(fill = "Heart Attack Status") +
scale_x_discrete(
limits = c("Normal", "Overweight", "Obese"),
labels = c(
"Normal"      = "Normal Weight (18.5–24.9)",
"Obese"       = "Obese (≥ 30.0)",
"Overweight"  = "Overweight (25.0–29.9)"
),
drop = TRUE
) +
scale_fill_manual(values = custom_colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
ggtitle("Proportion of Heart Attack by BMI Levels")
custom_colors <- c("No" = "#1a80bb", "Yes" = "#f2c45f")
#Table
prop.table(table(df_clean$HeartAttack, df_clean$BMI_Cat), margin = 2)
#Bar graph
ggplot(df_clean, aes(x = BMI_Cat, fill = HeartAttack)) +
geom_bar(position = "fill") +
ylab("Proportion") +
xlab("BMI Level") +
labs(fill = "Heart Attack Status") +
scale_x_discrete(
limits = c("Normal", "Overweight", "Obese"),
labels = c(
"Normal"      = "Normal Weight (18.5–24.9)",
"Obese"       = "Obese (≥ 30.0)",
"Overweight"  = "Overweight (25.0–29.9)"
),
drop = TRUE
) +
scale_fill_manual(values = custom_colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
ggtitle("Proportion of Heart Attack by BMI Levels")
#Table
prop.table(table(df_clean$HeartAttack, df_clean$BMI_Cat), margin = 2)
#Bar graph
ggplot(df_clean, aes(x = BMI_Cat, fill = HeartAttack)) +
geom_bar(position = "fill") +
ylab("Proportion") +
xlab("BMI Level") +
labs(fill = "Heart Attack Status") +
scale_x_discrete(
limits = c("Normal", "Overweight", "Obese"),
labels = c(
"Normal"      = "Normal Weight (18.5–24.9)",
"Obese"       = "Obese (≥ 30.0)",
"Overweight"  = "Overweight (25.0–29.9)"
),
drop = TRUE
) +
scale_fill_manual(values = custom_colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Table
prop.table(table(df_clean$HeartAttack, df_clean$AGE), margin = 2)
#Bar graph
ggplot(df_clean, aes(x = AGE, fill = HeartAttack)) +
geom_bar(position = "fill") +
ylab("Proportion") +
xlab("Age") +
labs(fill = "Heart Attack Status") +
ggtitle("Proportion of Heart Attack by Age") +
scale_fill_manual(values = custom_colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
custom_colors <- c("No" = "#1a80bb", "Yes" = "#f2c45f")
#Table
prop.table(table(df_clean$HeartAttack, df_clean$SEX), margin = 2)
#Bar graph
ggplot(df_clean, aes(x = SEX, fill = HeartAttack)) +
geom_bar(position = "fill") +
ylab("Proportion") +
xlab("Sex") +
labs(fill = "Heart Attack Status") +
ggtitle("Proportion of Heart Attack by Sex") +
scale_fill_manual(values = custom_colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df_clean <- read.csv("~/Documents/GitHub/EDA_Project/data/cleaned_data.csv")
df_clean$BMI_Num <- df_clean$BMI_Num / 100
# Function to calculate mode
get_mode <- function(v) {
tbl <- table(v)
mode_val <- names(tbl)[which.max(tbl)]
return(mode_val)
}
custom_colors <- c("No" = "#1a80bb", "Yes" = "#f2c45f")
#Table
prop.table(table(df_clean$HeartAttack, df_clean$SEX), margin = 2)
#Bar graph
ggplot(df_clean, aes(x = SEX, fill = HeartAttack)) +
geom_bar(position = "fill") +
ylab("Proportion") +
xlab("Sex") +
labs(fill = "Heart Attack Status") +
ggtitle("Proportion of Heart Attack by Sex") +
scale_fill_manual(values = custom_colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Table
prop.table(table(df_clean$HeartAttack, df_clean$AGE), margin = 2)
#Bar graph
ggplot(df_clean, aes(x = AGE, fill = HeartAttack)) +
geom_bar(position = "fill") +
ylab("Proportion") +
xlab("Age") +
labs(fill = "Heart Attack Status") +
ggtitle("Proportion of Heart Attack by Age") +
scale_fill_manual(values = custom_colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Table
prop.table(table(df_clean$HeartAttack, df_clean$BMI_Cat), margin = 2)
#Bar graph
ggplot(df_clean, aes(x = BMI_Cat, fill = HeartAttack)) +
geom_bar(position = "fill") +
ylab("Proportion") +
xlab("BMI Level") +
labs(fill = "Heart Attack Status") +
scale_x_discrete(
limits = c("Normal", "Overweight", "Obese"),
labels = c(
"Normal"      = "Normal Weight (18.5–24.9)",
"Obese"       = "Obese (≥ 30.0)",
"Overweight"  = "Overweight (25.0–29.9)"
),
drop = TRUE
) +
ggtitle("Proportion of Heart Attack by Age") +
scale_fill_manual(values = custom_colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Table
prop.table(table(df_clean$HeartAttack, df_clean$BMI_Cat), margin = 2)
#Bar graph
ggplot(df_clean, aes(x = BMI_Cat, fill = HeartAttack)) +
geom_bar(position = "fill") +
ylab("Proportion") +
xlab("BMI Level") +
labs(fill = "Heart Attack Status") +
scale_x_discrete(
limits = c("Normal", "Overweight", "Obese"),
labels = c(
"Normal"      = "Normal Weight (18.5–24.9)",
"Obese"       = "Obese (≥ 30.0)",
"Overweight"  = "Overweight (25.0–29.9)"
),
drop = TRUE
) +
ggtitle("Proportion of Heart Attack by BMI Levels") +
scale_fill_manual(values = custom_colors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(irr)
# Parameters
kappa_true <- 0.107
n_subjects <- 12
n_raters <- 3
n_categories <- 4
n_sim <- 1000
alpha <- 0.05
# Simulate data with target kappa
generate_ratings <- function(n, kappa, raters, categories) {
ratings <- matrix(nrow = n, ncol = raters)
for (i in 1:n) {
true_cat <- sample(1:categories, 1)
agree_prob <- kappa + (1 - kappa) / categories
if (runif(1) < agree_prob) {
ratings[i, ] <- rep(true_cat, raters)
} else {
ratings[i, ] <- sample(1:categories, raters, replace = TRUE)
}
}
return(as.data.frame(ratings))
}
# Run simulation
p_values <- replicate(n_sim, {
sim_data <- generate_ratings(n_subjects, kappa_true, n_raters, n_categories)
test_result <- kappam.fleiss(sim_data)
test_result$p.value < alpha
})
# Estimated power
power_estimate <- mean(p_values)
cat("Estimated power for κ =", kappa_true, ":", power_estimate, "\n")
library(irr)
# Parameters
kappa_true <- -0.333
n_subjects <- 12
n_raters <- 3
n_categories <- 4
n_sim <- 1000
alpha <- 0.05
# Simulate data with target kappa
generate_ratings <- function(n, kappa, raters, categories) {
ratings <- matrix(nrow = n, ncol = raters)
for (i in 1:n) {
true_cat <- sample(1:categories, 1)
agree_prob <- kappa + (1 - kappa) / categories
if (runif(1) < agree_prob) {
ratings[i, ] <- rep(true_cat, raters)
} else {
ratings[i, ] <- sample(1:categories, raters, replace = TRUE)
}
}
return(as.data.frame(ratings))
}
# Run simulation
p_values <- replicate(n_sim, {
sim_data <- generate_ratings(n_subjects, kappa_true, n_raters, n_categories)
test_result <- kappam.fleiss(sim_data)
test_result$p.value < alpha
})
# Estimated power
power_estimate <- mean(p_values)
cat("Estimated power for κ =", kappa_true, ":", power_estimate, "\n")
